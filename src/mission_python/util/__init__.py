# =================================================================================
#   수정 금지 안내 (Do NOT modify)
# ---------------------------------------------------------------------------------
# - 이 파일을 절대로 수정하지 마세요.
#   수정 시, 개발 과정에 대한 평가 점수가 0점 처리됩니다.
# - Do NOT modify this file.
#   If modified, you will receive a ZERO for the development process evaluation.
# =================================================================================

# --- [파일의 역할과 실행 원리] ---
#
# 이 __init__.py 파일은 파이썬에게 'mission_python'이라는 디렉토리가 단순한 폴더가 아닌,
# 여러 모듈(.py 파일)을 포함하는 하나의 '패키지'임을 알려주는 특별한 역할을 합니다.
#
# ★★★ 가장 중요한 특징 ★★★
# 이 파일 안에 있는 코드는, 이 패키지('mission_python')나 또는 패키지 안의 다른 모듈
# (예: main.py, util/utility.py)이 프로그램에서 '처음으로 import 될 때'
# 자동으로, 그리고 단 한 번만 실행됩니다.
#
# 즉, 이 파일은 패키지의 모든 활동이 시작되기 전에 가장 먼저 실행되는 '관문' 또는
# '초기 설정 스크립트'와 같습니다.
#
# ---------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------
# 1. 자동화에 필요한 핵심 모듈 임포트
# ---------------------------------------------------------------------------------

# ⚙️ [코드 변경 추적 모듈]
# 'mission_python/util/utility.py' 파일을 가져옵니다. 이 모듈은 학생이 수정한
# 'main.py' 파일의 변경 이력을 감지하고, 암호화하여 기록하는 모든 핵심 기능을 담고 있습니다.
# 'as utility' 구문은 앞으로 'mission_python.util.utility'라는 긴 이름 대신
# 'utility'라는 간결한 이름으로 이 모듈을 사용하겠다는 의미입니다.
import mission_python.util.utility as utility

# 📍 [시스템 정보 수집 모듈]
# 'mission_python/geolocation.py' 파일을 가져옵니다. 이 모듈은 코드가 실행되는
# 컴퓨터의 고유한 하드웨어 및 네트워크 정보(시스템 핑거프린트)를 수집하고,
# 암호화하여 파일로 저장하는 역할을 합니다.
import mission_python.util.geolocation as geolocation


# ---------------------------------------------------------------------------------
# 2. 코드 변경사항 자동 기록 실행 (Code Change Logging)
# ---------------------------------------------------------------------------------

# 💾 [실행 시점]
# 학생이 `main.py`를 실행하면, 파이썬 인터프리터는 `main.py` 상단의
# `import mission_python.util.utility` 라인을 읽는 순간, 'mission_python' 패키지를
# 초기화하기 위해 이 `__init__.py` 파일을 가장 먼저 실행합니다.
#
# [동작 설명]
# 위에서 임포트한 'utility' 모듈 안의 'commit_changes()' 함수를 즉시 호출합니다.
# 이 함수는 다음과 같은 일을 자동으로 수행합니다.
#   1. 'main.py' 파일의 현재 내용을 읽어옵니다.
#   2. 'log/log.temp'에 저장된 직전 버전과 현재 내용을 비교(diff)합니다.
#   3. 변경사항이 감지되면, 그 차이점을 암호화하여 'log/log.encrypted' 파일에 추가로 기록합니다.
#   4. 현재 내용을 다음 비교를 위해 'log/log.temp' 파일에 덮어씁니다.
#
# [목적]
# 이 메커니즘을 통해, 학생이 코드를 수정하고 실행할 때마다 마치 git commit처럼
# 모든 개발 과정이 자동으로, 누락 없이, 안전하게 기록됩니다.
utility.commit_changes()


# ---------------------------------------------------------------------------------
# 3. 시스템 정보 수집 및 기록 실행 (System Fingerprinting)
# ---------------------------------------------------------------------------------

# 💻 [실행 시점]
# `commit_changes()` 함수가 실행된 직후, 이어서 바로 실행됩니다.
#
# [동작 설명]
# 'geolocation' 모듈 안의 'create_signature_if_not_exists()' 함수를 호출합니다.
# 이름에서 알 수 있듯이, 이 함수는 다음의 일을 수행합니다.
#   1. 'log/signature.json.encrypted' 파일이 이미 존재하는지 확인합니다.
#   2. 파일이 존재하면, "이미 존재하므로 건너뜁니다"라는 메시지를 출력하고 아무것도 하지 않습니다.
#   3. 파일이 존재하지 않으면 (즉, 최초 실행이면), 현재 시스템의 다양한 정보
#      (IP, MAC 주소, OS 정보 등)를 수집하여 암호화하고 파일로 저장합니다.
#
# [목적]
# 학생이 과제를 수행하는 환경을 단 한 번만 기록하여, 평가의 공정성과 신뢰성을
# 확보하기 위한 장치입니다.


geolocation.create_signature_if_not_exists()


# === [전체 실행 흐름 요약] ========================================================
#
# 1. 학생이 터미널에서 `python main.py`를 실행함
# 2. 파이썬이 `main.py`를 읽다가 `import` 구문을 만남
# 3. **파이썬이 'mission_python' 패키지 초기화를 위해 이 `__init__.py` 파일을 먼저 실행함**
# 4. `utility.commit_changes()`가 호출되어 `main.py`의 현재 상태가 기록됨
# 5. `geolocation.create_signature_if_not_exists()`가 호출되어, 최초 실행 시 시스템 정보가 기록됨
# 6. `__init__.py` 파일의 모든 코드가 실행 완료됨
# 7. **비로소 `main.py`의 나머지 코드 (e.g., if __name__ == "__main__": 블록)가 실행됨**
#
# ==============================================================================